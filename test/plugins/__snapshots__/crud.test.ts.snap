// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@pg-nano/plugin-crud > basic cases 1`] = `
{
  "sql/schema.ts": "/* BEWARE: This file was generated by pg-nano. Any changes you make will be overwritten. */
import { bindQueryRowOrNull, bindQueryValue } from 'pg-nano'
import * as t from './typeData.js'

export type User = {
  id: number
  name: string
  tags?: string[]
}
export declare namespace User {
  type InsertParams = {
    id?: number
    name: string
    tags?: string[]
  }
  type UpsertParams = InsertParams & {
    id: number
  }
}

export declare namespace createUser {
  type Params = [User.InsertParams]
  type Result = User
}

export const createUser = /* @__PURE__ */ bindQueryRowOrNull<createUser.Params, createUser.Result>("create_user", $ => $.arity(1, 1).mapInput(0, t.insert_mapper(t.user)).returnsRecord())

export declare namespace deleteUser {
  type Params = { id: number }
  type Result = boolean
}

export const deleteUser = /* @__PURE__ */ bindQueryValue<deleteUser.Params, deleteUser.Result>("delete_user", $ => $.arity(1, 1).namedArgs(["id"]))

export declare namespace getUser {
  type Params = { id: number }
  type Result = User
}

export const getUser = /* @__PURE__ */ bindQueryRowOrNull<getUser.Params, getUser.Result>("get_user", $ => $.arity(1, 1).namedArgs(["id"]).returnsRecord())

export declare namespace updateUser {
  type Params = [number, Partial<User>]
  type Result = User
}

export const updateUser = /* @__PURE__ */ bindQueryRowOrNull<updateUser.Params, updateUser.Result>("update_user", $ => $.arity(2, 2).mapInput(1, t.update_mapper).returnsRecord())

export declare namespace upsertUser {
  type Params = [User.UpsertParams]
  type Result = User
}

export const upsertUser = /* @__PURE__ */ bindQueryRowOrNull<upsertUser.Params, upsertUser.Result>("upsert_user", $ => $.arity(1, 1).mapInput(0, t.insert_mapper(t.user)).returnsRecord())
",
  "sql/typeData.ts": "/* BEWARE: This file was generated by pg-nano. Any changes you make will be overwritten. */
import * as t from './typeData.js'

export { defineArrayMapper as array, defineRowMapper as row } from 'pg-nano'

// Field mappers
export { insert_mapper } from "@pg-nano/plugin-crud/field-mappers"
export { update_mapper } from "@pg-nano/plugin-crud/field-mappers"

// Composite types
export const user = /* @__PURE__ */ t.row(["id","name","tags"])
",
}
`;
