// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@pg-nano/plugin-crud > basic cases 1`] = `
{
  "sql/schema.ts": "/* BEWARE: This file was generated by pg-nano. Any changes you make will be overwritten. */
import { bindQueryRow, bindQueryRowOrNull, bindQueryValue, type Input } from 'pg-nano'
import * as t from './typeData.js'

/**
 * [Source](./schema.sql)
 */
export type Book = {
  sku: string
  title: string
}
export declare namespace Book {
  type InsertParams = Input<Book>
  type UpsertParams = InsertParams
}

/**
 * [Source](./schema.sql)
 */
export type User = {
  id: BigInt
  name: string
  tags?: string[]
}
export declare namespace User {
  type InsertParams = Input<{
    name: string
    tags?: string[]
  }>
  type UpsertParams = InsertParams & Input<{
    id: BigInt
  }>
}

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace createBook {
  type Params = [Book.InsertParams]
  type Result = Book
}

export const createBook = /* @__PURE__ */ bindQueryRow<createBook.Params, createBook.Result>("create_book", $ => $.arity(1, 1).mapInput(0, t.insert_mapper(t.book)).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace createUser {
  type Params = [User.InsertParams]
  type Result = User
}

export const createUser = /* @__PURE__ */ bindQueryRow<createUser.Params, createUser.Result>("create_user", $ => $.arity(1, 1).mapInput(0, t.insert_mapper(t.user)).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace deleteBook {
  type Params = { sku: string }
  type Result = boolean
}

export const deleteBook = /* @__PURE__ */ bindQueryValue<deleteBook.Params, deleteBook.Result>("delete_book", $ => $.arity(1, 1).namedArgs(["sku"]))

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace deleteUser {
  type Params = { id: BigInt }
  type Result = boolean
}

export const deleteUser = /* @__PURE__ */ bindQueryValue<deleteUser.Params, deleteUser.Result>("delete_user", $ => $.arity(1, 1).namedArgs(["id"]))

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace getBook {
  type Params = { sku: string }
  type Result = Book
}

export const getBook = /* @__PURE__ */ bindQueryRowOrNull<getBook.Params, getBook.Result>("get_book", $ => $.arity(1, 1).namedArgs(["sku"]).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace getUser {
  type Params = { id: BigInt }
  type Result = User
}

export const getUser = /* @__PURE__ */ bindQueryRowOrNull<getUser.Params, getUser.Result>("get_user", $ => $.arity(1, 1).namedArgs(["id"]).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace updateBook {
  type Params = [string, Partial<Book>]
  type Result = Book
}

export const updateBook = /* @__PURE__ */ bindQueryRow<updateBook.Params, updateBook.Result>("update_book", $ => $.arity(2, 2).mapInput(1, t.update_mapper).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace updateUser {
  type Params = [BigInt, Partial<User>]
  type Result = User
}

export const updateUser = /* @__PURE__ */ bindQueryRow<updateUser.Params, updateUser.Result>("update_user", $ => $.arity(2, 2).mapInput(1, t.update_mapper).returnsRecord())

/**
 * [Source](./nano_plugins/@pg-nano__plugin-crud.pgsql)
 */
export declare namespace upsertBook {
  type Params = [Book.UpsertParams]
  type Result = Book
}

export const upsertBook = /* @__PURE__ */ bindQueryRow<upsertBook.Params, upsertBook.Result>("upsert_book", $ => $.arity(1, 1).mapInput(0, t.insert_mapper(t.book)).returnsRecord())
",
  "sql/typeData.ts": "/* BEWARE: This file was generated by pg-nano. Any changes you make will be overwritten. */
import * as t from './typeData.js'

export * from 'pg-nano/field-mappers'

// Field mappers
export { insert_mapper } from "@pg-nano/plugin-crud/field-mappers"
export { update_mapper } from "@pg-nano/plugin-crud/field-mappers"

// Composite types
export const book = /* @__PURE__ */ t.row(["sku","title"])

export const user = /* @__PURE__ */ t.row(["id","name","tags"])


",
}
`;
